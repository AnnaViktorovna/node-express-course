In this lesson, you created a middleware function called asyncWrapper. Why?
The asyncWrapper is using for handling async functions to simplify  error handling for async routes handlers.


Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return res.status(404).json({msg: `No task with the id : ${taskId}`})
  }  
  res.status(200).json({ task });  
});  